name: Deploy Backend to EB + Ping Vercel

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-eb.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Install EB CLI
        run: pip install --upgrade awsebcli

      - name: Debug AWS identity & region
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: Debug workspace and EB setup
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current dir:"
          ls -la
          echo "EB config:"
          cat .elasticbeanstalk/config.yml || echo "No EB config found"
          echo "Docker file exists:"
          ls -la Dockerfile || echo "No Dockerfile"
          echo ".ebextensions contents:"
          ls -la .ebextensions/ || echo "No .ebextensions"

      - name: Init EB (clean setup)
        run: |
          APP_NAME=studentpilot-backend
          ENV_NAME=studentpilot-backend-env
          # Force clean EB setup to avoid old environment conflicts
          rm -rf .elasticbeanstalk/config.yml || true
          eb init "$APP_NAME" -p "Docker" --region "${{ secrets.AWS_DEFAULT_REGION }}"
          # Set the environment we want to use
          eb use "$ENV_NAME" || echo "Environment $ENV_NAME not found, will create"

      - name: Ensure environment exists
        run: |
          ENV_NAME=studentpilot-backend-env
          if ! eb status "$ENV_NAME" >/dev/null 2>&1; then
            echo "Creating new environment: $ENV_NAME"
            eb create "$ENV_NAME" --single --platform "Docker" --cname "$ENV_NAME" --timeout 20
          else
            echo "Environment $ENV_NAME already exists"
            eb use "$ENV_NAME"
          fi

      - name: Guard: no legacy EB options
        run: |
          if grep -RniE "aws:elasticbeanstalk:container:docker|ContainerPort" .; then
            echo "::error::Found legacy EB Docker namespace (ContainerPort). Remove it."; exit 1; fi

      - name: Set environment variables
        run: |
          eb use studentpilot-backend-env
          eb setenv PORT=8000 FRONTEND_ORIGIN=https://wms-virid-six.vercel.app

      - name: Deploy (standard eb deploy)
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          LABEL="build-${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}"
          echo "LABEL=$LABEL"
          eb deploy --label "$LABEL" --staged

      - name: Show status & health
        run: |
          eb status
          eb health

      - name: Get EB CNAME (URL) and save
        id: eburl
        run: |
          URL=$(eb status | sed -n 's/^ *CNAME: *//p' | tr -d '\r')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "EB_URL=$URL"

      - name: Smoke test
        run: |
          URL=${{ steps.eburl.outputs.url }}
          echo "Testing $URL"
          curl -fsS http://$URL/health || (echo "Health failed" && exit 1)
          curl -s -X POST http://$URL/api/search -H 'Content-Type: application/json' -d '{"query":"software","location":"","mode":"","min_stipend":0,"skills":[],"domains":[]}' | head -c 300 || true

      - name: Trigger Vercel deploy (Deploy Hook)
        if: steps.eburl.outputs.url != '' && secrets.VERCEL_DEPLOY_HOOK != ''
        run: |
          echo "Triggering Vercel redeploy..."
          curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK }}"
