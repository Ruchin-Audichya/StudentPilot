name: Deploy Backend to AWS EB

on:
  push:
    branches: [ "main" ]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-eb.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Install EB CLI
        run: pip install --upgrade awsebcli

      - name: Verify workspace
        run: |
          echo "=== Current Directory ==="
          pwd
          ls -la
          echo "=== Dockerfile exists ==="
          cat Dockerfile | head -5
          echo "=== EB Extensions ==="
          ls -la .ebextensions/ || echo "No .ebextensions"
          echo "=== Data directory ==="
          ls -la data/ || echo "No data directory"

      - name: Initialize EB Application
        run: |
          APP_NAME="studentpilot-backend"
          REGION="${{ secrets.AWS_DEFAULT_REGION }}"
          echo "Initializing EB app: $APP_NAME in region: $REGION"
          eb init "$APP_NAME" --platform "Docker" --region "$REGION" || true

      - name: Create or Use Environment
        run: |
          ENV_NAME="studentpilot-backend-env"
          echo "Checking if environment $ENV_NAME exists..."
          
          if eb status "$ENV_NAME" 2>/dev/null; then
            echo "Environment exists, using it"
            eb use "$ENV_NAME"
          else
            echo "Creating new environment: $ENV_NAME"
            eb create "$ENV_NAME" \
              --platform "Docker" \
              --instance-types t3.micro \
              --timeout 25 \
              --cname "$ENV_NAME" || {
                echo "Create failed, checking if it exists now..."
                sleep 10
                if eb status "$ENV_NAME" 2>/dev/null; then
                  echo "Environment created successfully, using it"
                  eb use "$ENV_NAME"
                else
                  echo "Environment creation failed completely"
                  exit 1
                fi
              }
          fi

      - name: Set Environment Variables
        run: |
          eb use studentpilot-backend-env
          eb setenv \
            PORT=8000 \
            DISABLE_LINKEDIN=1 \
            FRONTEND_ORIGIN=https://wms-virid-six.vercel.app \
            WORKERS=2 \
            TIMEOUT=120

      - name: Deploy Application
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
        run: |
          LABEL="build-${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}"
          echo "Deploying with label: $LABEL"
          
          # Deploy with retries
          for i in {1..3}; do
            echo "Deploy attempt $i/3"
            if eb deploy --label "$LABEL" --timeout 30; then
              echo "Deploy successful!"
              break
            else
              echo "Deploy attempt $i failed"
              if [ $i -eq 3 ]; then
                echo "All deploy attempts failed"
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Get Environment URL
        id: url
        run: |
          URL=$(eb status | grep -E 'CNAME:|Environment details for:' | grep CNAME | awk '{print $2}' | tr -d '\r\n')
          if [ -z "$URL" ]; then
            URL=$(eb status | grep -o 'http[s]*://[^"]*' | head -1)
          fi
          echo "url=http://$URL" >> $GITHUB_OUTPUT
          echo "Backend URL: http://$URL"

      - name: Health Check
        run: |
          URL="${{ steps.url.outputs.url }}"
          echo "Testing health endpoint: $URL/health"
          
          # Wait for deployment to be ready
          for i in {1..30}; do
            if curl -f -s "$URL/health" | grep -q "ok"; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Waiting for deployment... ($i/30)"
              sleep 10
            fi
          done
          
          # Final verification
          echo "=== Final Health Check ==="
          curl -v "$URL/health" || echo "Health check failed"
          
          echo "=== Test Search API ==="
          curl -s -X POST "$URL/api/search" \
            -H "Content-Type: application/json" \
            -d '{"query":"python","location":"","mode":"","min_stipend":0,"skills":[],"domains":[]}' \
            | head -c 500 || echo "Search API test failed"
