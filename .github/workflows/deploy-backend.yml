name: Deploy Backend (Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-backend
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      AWS_DEFAULT_REGION: ap-south-1
      APP_NAME: _DYNAMIC_            # Will be discovered automatically
      ENV_NAME: WheresMyStipend-env-1
      PORT: 8000
      WORKING_DIR: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install EB CLI
        run: |
          pip install --upgrade pip
          pip install awsebcli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Debug AWS identity & region
        run: |
          aws sts get-caller-identity
          echo "AWS_REGION=$AWS_REGION"
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION"
          echo "Credentials present? $( if [ -n "$AWS_ACCESS_KEY_ID" ]; then echo yes; else echo no; fi )"

      - name: Discover Application Name
        id: discover
        run: |
          APP=$(aws elasticbeanstalk describe-environments --environment-names "$ENV_NAME" --query 'Environments[0].ApplicationName' --output text 2>/dev/null || echo NONE)
          if [ "$APP" = "NONE" ] || [ "$APP" = "None" ] || [ "$APP" = "null" ]; then
            APP=StudentPilotApp
            echo "Environment not found yet; defaulting application to $APP"
          else
            echo "Detected existing application: $APP"
          fi
          echo "APP_NAME=$APP" >> $GITHUB_ENV
          echo "APP_NAME=$APP"
          # Patch existing config if present
          if [ -f .elasticbeanstalk/config.yml ]; then
            if ! grep -q "application_name: $APP" .elasticbeanstalk/config.yml; then
              sed -i "s/application_name: .*/application_name: $APP/" .elasticbeanstalk/config.yml || true
            fi
          fi

      - name: Init EB (idempotent)
        run: |
          if [ ! -d .elasticbeanstalk ]; then
            eb init "$APP_NAME" --region "$AWS_REGION" --platform Docker
          else
            echo "EB already initialized"
          fi

      - name: Ensure environment exists
        run: |
          if eb status "$ENV_NAME" >/dev/null 2>&1; then
            echo "Environment exists."
          else
            echo "Creating environment $ENV_NAME under app $APP_NAME"
            set +e
            OUT=$(eb create "$ENV_NAME" --single --timeout 40 2>&1)
            CODE=$?
            set -e
            echo "$OUT"
            if [ $CODE -ne 0 ]; then
              if echo "$OUT" | grep -qi 'already exists'; then
                echo "Create reported already exists; continuing"
              else
                echo "Failed to create environment" >&2; exit 1
              fi
            fi
          fi
          eb use "$ENV_NAME" || true

      - name: Set environment variables
        run: |
          eb setenv PORT=8000 DISABLE_LINKEDIN=1 || true

      - name: Deploy (standard eb deploy)
        run: |
          LABEL=build-${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}
          echo "Deploying label $LABEL"
          eb deploy "$ENV_NAME" --label "$LABEL" --staged

      - name: Show status & health
        run: |
          eb status "$ENV_NAME" || true
          eb health "$ENV_NAME" --refresh || true

      - name: Smoke test API endpoints
        run: |
          set -e
          CNAME=$(eb status "$ENV_NAME" | awk '/CNAME:/ {print $2}')
          if [ -z "$CNAME" ]; then echo "CNAME not found"; exit 1; fi
          echo "CNAME=$CNAME" | tee cname.txt
          ORIGIN="http://$CNAME"
          echo "Health:"; curl -fsS "$ORIGIN/health" | head -c 200
          echo; echo "Search:"; curl -s -X POST "$ORIGIN/api/search" -H 'Content-Type: application/json' \
            -d '{"query":"software engineer","location":"","mode":"","min_stipend":0,"skills":[],"domains":[]}' | head -c 400 || true
          # Optional chat test (won't fail build if missing API key)
          echo; echo "Chat (optional):"; curl -s -X POST "$ORIGIN/api/chat" -H 'Content-Type: application/json' \
            -d '{"message":"Hello"}' | head -c 400 || true
          echo; echo "Smoke tests completed"

      - name: Upload CNAME artifact
        uses: actions/upload-artifact@v4
        with:
          name: eb-cname
          path: cname.txt
